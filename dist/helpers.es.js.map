{"version":3,"file":"helpers.es.js","sources":["../src/lib/isObject.ts","../src/lib/merge.ts"],"sourcesContent":["export default function(item: any): boolean {\n  return item && typeof item === 'object' && item !== null && !Array.isArray(item);\n}","import { MergeOptions } from \"../types\";\nimport isObject from \"./isObject\";\n\nexport default function merge<T>(target: any, source: any, options: MergeOptions = {}): T {\n  const mergeObject = options.mergeObjects === undefined ? true : !!options.mergeObjects;\n\n  if (isObject(target) && isObject(source)) {\n    for (const key of Object.keys(source)) {\n      if (mergeObject && isObject(source[key])) {\n        if (!target[key] || !isObject(target[key])) {\n          target[key] = source[key];\n        }\n\n        merge(target[key], source[key]);\n      } else if (options.mergeArrays && Array.isArray(source[key])) {\n        console.log(key);\n        if (Array.isArray(target[key])) {\n          target[key].push(...source[key]);\n        } else {\n          Object.assign(target, {\n            [key]: source[key]\n          })\n        }\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        })\n      }\n    }\n  }\n  return target as T;\n}"],"names":["item","Array","isArray","merge","target","source","options","mergeObject","undefined","mergeObjects","isObject","key","Object","keys","mergeArrays","console","log","push","assign","[object Object]"],"mappings":"kBAAwBA;IACtB,OAAOA,QAAwB,mBAATA,QAA8B,SAATA,SAAkBC,MAAMC,QAAQF;;;SCErDG,MAASC,QAAaC,QAAaC,UAAwB;IACjF,MAAMC,mBAAuCC,MAAzBF,QAAQG,kBAAsCH,QAAQG;IAE1E,IAAIC,SAASN,WAAWM,SAASL,SAC/B,KAAK,MAAMM,OAAOC,OAAOC,KAAKR,SACxBE,eAAeG,SAASL,OAAOM,SAC5BP,OAAOO,QAASD,SAASN,OAAOO,UACnCP,OAAOO,OAAON,OAAOM;IAGvBR,MAAMC,OAAOO,MAAMN,OAAOM,SACjBL,QAAQQ,eAAeb,MAAMC,QAAQG,OAAOM,SACrDI,QAAQC,IAAIL;IACRV,MAAMC,QAAQE,OAAOO,QACvBP,OAAOO,KAAKM,QAAQZ,OAAOM,QAE3BC,OAAOM,OAAOd,QAAQ;QACpBe,CAACR,MAAMN,OAAOM;UAIlBC,OAAOM,OAAOd,QAAQ;QACpBe,CAACR,MAAMN,OAAOM;;IAKtB,OAAOP;;;"}